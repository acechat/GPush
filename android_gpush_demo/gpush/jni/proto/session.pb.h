// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

#ifndef PROTOBUF_session_2eproto__INCLUDED
#define PROTOBUF_session_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "pair.pb.h"
// @@protoc_insertion_point(includes)

namespace gim {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_session_2eproto();
void protobuf_AssignDesc_session_2eproto();
void protobuf_ShutdownFile_session_2eproto();

class Sess;

// ===================================================================

class Sess : public ::google::protobuf::MessageLite {
 public:
  Sess();
  virtual ~Sess();

  Sess(const Sess& from);

  inline Sess& operator=(const Sess& from) {
    CopyFrom(from);
    return *this;
  }

  static const Sess& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Sess* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Sess* other);

  // implements Message ----------------------------------------------

  Sess* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Sess& from);
  void MergeFrom(const Sess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 lasttime = 3;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLasttimeFieldNumber = 3;
  inline ::google::protobuf::int64 lasttime() const;
  inline void set_lasttime(::google::protobuf::int64 value);

  // optional string sessid = 4;
  inline bool has_sessid() const;
  inline void clear_sessid();
  static const int kSessidFieldNumber = 4;
  inline const ::std::string& sessid() const;
  inline void set_sessid(const ::std::string& value);
  inline void set_sessid(const char* value);
  inline void set_sessid(const char* value, size_t size);
  inline ::std::string* mutable_sessid();
  inline ::std::string* release_sessid();
  inline void set_allocated_sessid(::std::string* sessid);

  // optional int32 consvid = 5;
  inline bool has_consvid() const;
  inline void clear_consvid();
  static const int kConsvidFieldNumber = 5;
  inline ::google::protobuf::int32 consvid() const;
  inline void set_consvid(::google::protobuf::int32 value);

  // optional string version = 6;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 6;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // repeated .gim.Pair kvs = 7;
  inline int kvs_size() const;
  inline void clear_kvs();
  static const int kKvsFieldNumber = 7;
  inline const ::gim::Pair& kvs(int index) const;
  inline ::gim::Pair* mutable_kvs(int index);
  inline ::gim::Pair* add_kvs();
  inline const ::google::protobuf::RepeatedPtrField< ::gim::Pair >&
      kvs() const;
  inline ::google::protobuf::RepeatedPtrField< ::gim::Pair >*
      mutable_kvs();

  // @@protoc_insertion_point(class_scope:gim.Sess)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_sessid();
  inline void clear_has_sessid();
  inline void set_has_consvid();
  inline void clear_has_consvid();
  inline void set_has_version();
  inline void clear_has_version();

  ::std::string* id_;
  ::google::protobuf::int64 lasttime_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 consvid_;
  ::std::string* sessid_;
  ::std::string* version_;
  ::google::protobuf::RepeatedPtrField< ::gim::Pair > kvs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_session_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_session_2eproto();
  #endif
  friend void protobuf_AssignDesc_session_2eproto();
  friend void protobuf_ShutdownFile_session_2eproto();

  void InitAsDefaultInstance();
  static Sess* default_instance_;
};
// ===================================================================


// ===================================================================

// Sess

// optional string id = 1;
inline bool Sess::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sess::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sess::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sess::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Sess::id() const {
  return *id_;
}
inline void Sess::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Sess::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Sess::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sess::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Sess::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sess::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 type = 2;
inline bool Sess::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sess::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sess::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sess::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Sess::type() const {
  return type_;
}
inline void Sess::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 lasttime = 3;
inline bool Sess::has_lasttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sess::set_has_lasttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sess::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sess::clear_lasttime() {
  lasttime_ = GOOGLE_LONGLONG(0);
  clear_has_lasttime();
}
inline ::google::protobuf::int64 Sess::lasttime() const {
  return lasttime_;
}
inline void Sess::set_lasttime(::google::protobuf::int64 value) {
  set_has_lasttime();
  lasttime_ = value;
}

// optional string sessid = 4;
inline bool Sess::has_sessid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sess::set_has_sessid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sess::clear_has_sessid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sess::clear_sessid() {
  if (sessid_ != &::google::protobuf::internal::kEmptyString) {
    sessid_->clear();
  }
  clear_has_sessid();
}
inline const ::std::string& Sess::sessid() const {
  return *sessid_;
}
inline void Sess::set_sessid(const ::std::string& value) {
  set_has_sessid();
  if (sessid_ == &::google::protobuf::internal::kEmptyString) {
    sessid_ = new ::std::string;
  }
  sessid_->assign(value);
}
inline void Sess::set_sessid(const char* value) {
  set_has_sessid();
  if (sessid_ == &::google::protobuf::internal::kEmptyString) {
    sessid_ = new ::std::string;
  }
  sessid_->assign(value);
}
inline void Sess::set_sessid(const char* value, size_t size) {
  set_has_sessid();
  if (sessid_ == &::google::protobuf::internal::kEmptyString) {
    sessid_ = new ::std::string;
  }
  sessid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sess::mutable_sessid() {
  set_has_sessid();
  if (sessid_ == &::google::protobuf::internal::kEmptyString) {
    sessid_ = new ::std::string;
  }
  return sessid_;
}
inline ::std::string* Sess::release_sessid() {
  clear_has_sessid();
  if (sessid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sessid_;
    sessid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sess::set_allocated_sessid(::std::string* sessid) {
  if (sessid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessid_;
  }
  if (sessid) {
    set_has_sessid();
    sessid_ = sessid;
  } else {
    clear_has_sessid();
    sessid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 consvid = 5;
inline bool Sess::has_consvid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Sess::set_has_consvid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Sess::clear_has_consvid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Sess::clear_consvid() {
  consvid_ = 0;
  clear_has_consvid();
}
inline ::google::protobuf::int32 Sess::consvid() const {
  return consvid_;
}
inline void Sess::set_consvid(::google::protobuf::int32 value) {
  set_has_consvid();
  consvid_ = value;
}

// optional string version = 6;
inline bool Sess::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Sess::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Sess::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Sess::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& Sess::version() const {
  return *version_;
}
inline void Sess::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void Sess::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void Sess::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sess::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* Sess::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sess::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .gim.Pair kvs = 7;
inline int Sess::kvs_size() const {
  return kvs_.size();
}
inline void Sess::clear_kvs() {
  kvs_.Clear();
}
inline const ::gim::Pair& Sess::kvs(int index) const {
  return kvs_.Get(index);
}
inline ::gim::Pair* Sess::mutable_kvs(int index) {
  return kvs_.Mutable(index);
}
inline ::gim::Pair* Sess::add_kvs() {
  return kvs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gim::Pair >&
Sess::kvs() const {
  return kvs_;
}
inline ::google::protobuf::RepeatedPtrField< ::gim::Pair >*
Sess::mutable_kvs() {
  return &kvs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gim

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_session_2eproto__INCLUDED
